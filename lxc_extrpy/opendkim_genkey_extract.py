import sys
import re

# parse '.txt' file generated by opendkim-genkey
# opendkim-genkey -b 2048 -s <selector> -D keys/<short name> -d <domain>

def extractDKMITxt(cont: str):
    ptr = cont.index('IN')

    selector = cont[:ptr].strip()
    if not re.match(r'^([a-z0-9\-]{1,256}\.){1,16}_domainkey$', selector):
        raise ValueError(f"Inappropriate selector: {selector}")

    cont = cont[ptr:]
    ptr = cont.index("TXT") + 3

    cont = cont[ptr:]
    ptr = cont.rfind("; -")

    if ptr == -1: # no comment
        comment = ""
    else:
        comment = cont[ptr + 3:].strip("-").strip()
        cont = cont[:ptr]

    value = ""
    v_atoms = cont.strip().split(" ")
    if v_atoms[0] != '(' or v_atoms[-1] != ')':
        raise ValueError("Bracket '(' or ')' surrounding value has not been found")

    for vp in v_atoms[1:-1]:
        vp = vp.strip().strip("\"")

        if len(vp) == 0:
            continue

        if vp[len(vp) - 1] == ";":
            value += vp + " "
        else:
            value += vp

    return selector, value, comment

def main(arg) -> int:
    if len(arg) != 2:
        print("Provide opendkim-genkey .txt output file")
        return 1

    with open(arg[1]) as file:
        selector, value, comment = extractDKMITxt(file.read())

    print("DKMI DNS settings: ")
    print(selector)
    print(value)
    print(comment)

    return 0

if __name__ == "__main__":
    try:
        ret_code = main(sys.argv)
    except ValueError as invalid_val:
        print(invalid_val)
        ret_code = 1
    except Exception as err:
        print(err)
        ret_code = 22
    finally:
        sys.exit(ret_code)
